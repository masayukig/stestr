# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, Matthew Treinish
# This file is distributed under the same license as the stestr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: stestr trunk\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-07 16:49+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../api/repository/abstract.rst:4
msgid "Abstract Repository Class"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract:1
msgid "Storage of test results."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract:3
msgid "A Repository provides storage and indexing of results."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract:5
msgid "The AbstractRepository class defines the contract to which any Repository implementation must adhere."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract:8
msgid "The stestr.repository.file module (see: :ref:`api_repository_file` is the usual repository that will be used. The stestr.repository.memory module (see: :ref:`api_repository_memory`) provides a memory only repository useful for internal testing."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract:13
msgid "Repositories are identified by their URL, and new ones are made by calling the initialize function in the appropriate repository module."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository:1
msgid "The base class for Repository implementations."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository:3
msgid "There are no interesting attributes or methods as yet."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.count:1
msgid "Return the number of test runs this repository has stored."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.count:0
msgid "return count"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.count:3
msgid "The count of test runs stored in the repository."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.find_metadata:1
msgid "Return the list of run_ids for a given metadata string."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.find_metadata:0
msgid "param"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.find_metadata:3
msgid "metadata: the metadata string to search for."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.find_metadata:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_failing:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_ids:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_run:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_times:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_metadata:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_test:0
msgid "Returns"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.find_metadata:4
msgid "a list of any test_ids that have that metadata value."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_failing:1
msgid "Get a TestRun that contains all of and only current failing tests."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_failing:3
msgid "a TestRun."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:1
msgid "Get an inserter that will insert a test run into the repository."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:3
msgid "Repository implementations should implement _get_inserter."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:5
msgid "get_inserter() does not add timing data to streams: it should be provided by the caller of get_inserter (e.g. commands.load)."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_ids:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_run:0
#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_times:0
msgid "Parameters"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:8
msgid "DEPREACTED: If True, the stream being inserted only executed some tests rather than all the projects tests. This option is deprecated and no longer does anything. It will be removed in the future."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:0
msgid "return an inserter"
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_inserter:12
msgid "Inserters meet the extended TestResult protocol that testtools 0.9.2 and above offer. The startTestRun and stopTestRun methods in particular must be called."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_latest_run:1
msgid "Return the latest run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_latest_run:3
msgid "Equivalent to get_test_run(latest_id())."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_ids:1
msgid "Return the test ids from the specified run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_ids:3
msgid "the id of the test run to query."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_ids:4
msgid "a list of test ids for the tests that were part of the specified test run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_run:1
msgid "Retrieve a TestRun object for run_id."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_run:3
msgid "The test run id to retrieve."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_run:4
msgid "A TestRun object."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_times:1
msgid "Retrieve estimated times for the tests test_ids."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_times:3
msgid "The test ids to query for timing data."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.get_test_times:4
msgid "A dict with two keys: 'known' and 'unknown'. The unknown key contains a set with the test ids that did run. The known key contains a dict mapping test ids to time in seconds."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepository.latest_id:1
msgid "Return the run id for the most recently inserted test run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepositoryFactory:1
msgid "Interface for making or opening repositories."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepositoryFactory.initialise:1
msgid "Create a repository at URL."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepositoryFactory.initialise:3
msgid "Call on the class of the repository you wish to create."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepositoryFactory.open:1
msgid "Open the repository at url."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractRepositoryFactory.open:3
msgid "Raise RepositoryNotFound if there is no repository at the given url."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun:1
msgid "A test run that has been stored in a repository."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun:3
msgid "Should implement the StreamResult protocol as well as the stestr specific methods documented here."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_id:1
msgid "Get the id of the test run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_id:3
msgid "Sometimes test runs will not have an id, e.g. test runs for 'failing'. In that case, this should return None."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_metadata:1
msgid "Get the metadata value for the test run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_metadata:3
msgid "A string of the metadata or None if it doesn't exist."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_subunit_stream:1
msgid "Get a subunit stream for this test run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_test:1
msgid "Get a testtools.TestCase-like object that can be run."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.AbstractTestRun.get_test:3
msgid "A TestCase like object which can be run to get the individual tests reported to a testtools.StreamResult/TestResult. (Clients of repository should provide an ExtendedToStreamDecorator decorator to permit either API to be used)."
msgstr ""

#: ../../../stestr/repository/abstract.py:docstring of stestr.repository.abstract.RepositoryNotFound:1
msgid "Raised when we try to open a repository that isn't there."
msgstr ""

