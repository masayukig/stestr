# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, Matthew Treinish
# This file is distributed under the same license as the stestr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: stestr trunk\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-05 11:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/internal_arch.rst:2
msgid "Internal Architecture"
msgstr ""

#: ../../source/internal_arch.rst:4
msgid ""
"This document is an attempt to explain at a high level how stestr is "
"constructed. It'll likely go stale quickly as the code changes, but "
"hopefully it'll be a useful starting point for new developers to "
"understand how the stestr is built. Full API documentation can be found "
"at :ref:`api`. It's also worth noting that any explanation of workflow or"
" internal operation is not necessarily an exact call path, but instead "
"just a high level explanation of how the components operate."
msgstr ""

#: ../../source/internal_arch.rst:13
msgid "Basic Structure"
msgstr ""

#: ../../source/internal_arch.rst:15
msgid ""
"At a high level there are a couple different major components to stestr: "
"the repository, and the cli layer."
msgstr ""

#: ../../source/internal_arch.rst:18
msgid ""
"The repository is how stestr stores all results from test runs and the "
"source of any data needed by any stestr operations that require past "
"runs. There are actually multiple repository types which are different "
"implementations of an abstract API. Right now there is only one complete "
"implementation, the file repository type, which is useful in practice but"
" that may not be the case in the future."
msgstr ""

#: ../../source/internal_arch.rst:25
msgid ""
"The CLI layer is where the different stestr commands are defined and "
"provides the command line interface for performing the different stestr "
"operations."
msgstr ""

#: ../../source/internal_arch.rst:29
msgid "CLI Layer"
msgstr ""

#: ../../source/internal_arch.rst:30
msgid ""
"The CLI layer is built using the `cliff.command`_ module. The stestr.cli "
"module defines a basic interface using cliff. Each subcommand has its own"
" module in stestr.commands and has 3 required functions to work properly:"
msgstr ""

#: ../../source/internal_arch.rst:35 ../../source/internal_arch.rst:45
msgid "get_parser(prog_name)"
msgstr ""

#: ../../source/internal_arch.rst:36 ../../source/internal_arch.rst:55
msgid "get_description()"
msgstr ""

#: ../../source/internal_arch.rst:37 ../../source/internal_arch.rst:62
msgid "take_action(parsed_args)"
msgstr ""

#: ../../source/internal_arch.rst:39
msgid ""
"NOTE: To keep the api compatibility in stestr.commands, we still have "
"each subcommands there."
msgstr ""

#: ../../source/internal_arch.rst:47
msgid ""
"This function is used to define subcommand arguments. It has a single "
"argparse parser object passed into it. The intent of this function is to "
"have any command specific arguments defined on the provided parser object"
" by calling `parser.add_argument()`_ for each argument."
msgstr ""

#: ../../source/internal_arch.rst:56
msgid ""
"The intent of this function is to return an command specific help "
"information. It is expected to return a string that will be used when the"
" subcommand is defined in argparse and will be displayed before the "
"arguments when ``--help`` is used on the subcommand."
msgstr ""

#: ../../source/internal_arch.rst:63
msgid ""
"This is where the real work for the command is performed. This is the "
"function that is called when the command is executed. This function is "
"called being wrapped by sys.exit() so an integer return is expected that "
"will be used for the command's return code. The arguments input "
"parsed_args is the argparse.Namespace object from the parsed CLI options."
msgstr ""

#: ../../source/internal_arch.rst:71
msgid "Operations for Running Tests"
msgstr ""

#: ../../source/internal_arch.rst:73
msgid ""
"The basic flow when stestr run is called at a high level is fairly "
"straight forward. In the default case when run is called the first "
"operation performed is unittest discovery which is used to get a complete"
" list of tests present. This list is then filtered by any user provided "
"selection mechanisms. (for example a cli regex filter) This is used to "
"select which tests the user actually intends to run. For more details on "
"test selection see: :ref:`api_selection` which defines the functions "
"which are used to actually perform the filtering."
msgstr ""

#: ../../source/internal_arch.rst:82
msgid ""
"Once there is complete list of tests that will be run the list gets "
"passed to the scheduler/partitioner. The scheduler takes the list of "
"tests and splits it into N groups where N is the concurrency that stestr "
"will use to run tests. If there is any timing data available in the "
"repository from previous runs this is used by the scheduler to try "
"balancing the test load between the workers. For the full details on how "
"the partitioning is performed see: :ref:`api_scheduler`."
msgstr ""

#: ../../source/internal_arch.rst:90
msgid ""
"With the tests split into multiple groups for each worker process we're "
"ready to start executing the tests. Each group of tests is used to launch"
" a test runner worker subprocess. As the name implies this is a test "
"runner that emits a subunit stream to stdout. These stdout streams are "
"combined in real time and stored in the repository at the end of the run "
"(using the load command). The combined stream is also used for the CLI "
"output either in a summary view or with a real time subunit output (which"
" is enabled with the ``--subunit`` argument)"
msgstr ""

