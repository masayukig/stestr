# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, Matthew Treinish
# This file is distributed under the same license as the stestr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# Masayuki Igawa <masayuki@igawa.io>, 2019. #zanata
msgid ""
msgstr ""
"Project-Id-Version: stestr trunk\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-07 12:42+0900\n"
"PO-Revision-Date: 2019-08-07 04:26+0000\n"
"Last-Translator: Masayuki Igawa <masayuki@igawa.io>\n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0\n"
"X-Generator: Zanata 4.6.2\n"

#: ../../../<Failing>:1
msgid "Show only a list of failing tests."
msgstr ""

#: ../../../<Failing>:1
#: ../../../<Last>:1
msgid "Show output as a subunit stream."
msgstr ""

#: ../../../<Failing>:1
msgid "Show the current failures known by the repository."
msgstr ""

#: ../../../<Failing>:1
#: ../../../<Init>:1
#: ../../../<Last>:1
#: ../../../<List>:1
#: ../../../<Load>:1
#: ../../../<Run>:1
#: ../../../<Slowest>:1
msgid "This command is provided by the stestr plugin."
msgstr ""

#: ../../../<Failing>:1
msgid ""
"Without --subunit, the process exit code will be non-zero if the previous "
"test run was not successful and test failures are shown. But, with --"
"subunit, the process exit code is non-zero only if the subunit stream could "
"not be generated successfully from any failures. The test results and run "
"status are included in the subunit stream emitted for the failed tests, so "
"the stream should be used for interpretting the failing tests. If no subunit "
"stream is emitted with --subunit and a zero exit code then there were no "
"failures in the most recent run in the repository."
msgstr ""

#: ../../../<Init>:1
msgid "Create a new repository."
msgstr ""

#: ../../../<Last>:1
msgid "Disable output with the subunit-trace output filter"
msgstr ""

#: ../../../<Last>:1
#: ../../../<Run>:1
msgid ""
"Enable color output in the subunit-trace output, if subunit-trace output is "
"enabled. (this is the default). If subunit-trace is disable this does "
"nothing."
msgstr ""

#: ../../../<Last>:1
msgid ""
"Failing tests are shown on the console and a summary of the run is printed "
"at the end."
msgstr ""

#: ../../../<Last>:1
#: ../../../<Run>:1
msgid ""
"Force subunit-trace output regardless of anyother options or config settings"
msgstr ""

#: ../../../<Last>:1
#: ../../../<Load>:1
#: ../../../<Run>:1
msgid ""
"If set do not print stdout or stderr attachment contents on a successful "
"test execution"
msgstr ""

#: ../../../<Last>:1
#: ../../../<Load>:1
#: ../../../<Run>:1
msgid ""
"If set print all text attachment contents on a successful test execution"
msgstr ""

#: ../../../<Last>:1
msgid "Show the last run loaded into a repository."
msgstr ""

#: ../../../<Last>:1
msgid ""
"Without --subunit, the process exit code will be non-zero if the test run "
"was not successful. With --subunit, the process exit code is non-zero only "
"if the subunit stream could not be generated successfully. The test results "
"and run status are included in the subunit stream, so the stream should be "
"used to determining the result of the run instead of the exit code when "
"using the --subunit flag."
msgstr ""

#: ../../../<List>:1
#: ../../../<Run>:1
msgid ""
"A list of string regex filters to initially apply on the test list. Tests "
"that match any of the regexes will be used. (assuming any other filtering "
"specified also uses it)"
msgstr ""

#: ../../../<List>:1
msgid "List the tests for a project."
msgstr ""

#: ../../../<List>:1
#: ../../../<Run>:1
msgid ""
"Path to a blacklist file, this file contains a separate regex exclude on "
"each newline"
msgstr ""

#: ../../../<List>:1
#: ../../../<Run>:1
msgid ""
"Path to a whitelist file, this file contains a separate regex on each "
"newline."
msgstr ""

#: ../../../<List>:1
#: ../../../<Run>:1
msgid ""
"Test rejection regex. If a test cases name matches on re.search() operation "
", it will be removed from the final test list. Effectively the black-regexp "
"is added to  black regexp list, but you do need to edit a file. The black "
"filtering happens after the initial white selection, which by default is "
"everything."
msgstr ""

#: ../../../<List>:1
msgid ""
"You can use a filter just like with the run command to see exactly what "
"tests match."
msgstr ""

#: ../../../<Load>:1
msgid "Append the stream into an existing entry in the repository"
msgstr ""

#: ../../../<Load>:1
msgid ""
"DEPRECATED: The stream being loaded was a partial run. This option is "
"deprecated and no does anything. It will be removed in the future"
msgstr ""

#: ../../../<Load>:1
#: ../../../<Run>:1
msgid "Display results in subunit format."
msgstr ""

#: ../../../<Load>:1
msgid "Display the loaded stream through the subunit-trace output filter"
msgstr ""

#: ../../../<Load>:1
msgid ""
"Enable color output in the subunit-trace output, if subunit-trace output is "
"enabled. If subunit-trace is disable this does nothing."
msgstr ""

#: ../../../<Load>:1
msgid ""
"Failing tests are shown on the console and a summary of the stream is "
"printed at the end."
msgstr ""

#: ../../../<Load>:1
msgid "Initialise the repository if it does not exist already"
msgstr ""

#: ../../../<Load>:1
msgid "Load a subunit stream into a repository."
msgstr ""

#: ../../../<Load>:1
#: ../../../<Run>:1
msgid "Print one character status for each test"
msgstr ""

#: ../../../<Load>:1
msgid "The subunit v2 stream files to load into the repository"
msgstr ""

#: ../../../<Load>:1
msgid ""
"Without --subunit, the process exit code will be non-zero if the test run "
"was not successful. With --subunit, the process exit code is non-zero if the "
"subunit stream could not be generated successfully. The test results and run "
"status are included in the subunit stream, so the stream should be used to "
"determining the result of the run instead of the exit code when using the --"
"subunit flag."
msgstr ""

#: ../../../<Run>:1
msgid "After the test run, print the slowest tests."
msgstr ""

#: ../../../<Run>:1
msgid ""
"Combine the results from the test run with the last run in the repository"
msgstr ""

#: ../../../<Run>:1
msgid ""
"DEPRECATED: Only some tests will be run. Implied by --failing. This option "
"is deprecated and no longer does anything. It will be removed in the future"
msgstr ""

#: ../../../<Run>:1
msgid "Disable the default subunit-trace output filter"
msgstr ""

#: ../../../<Run>:1
msgid "How many processes to use. The default (0) autodetects your CPU count."
msgstr ""

#: ../../../<Run>:1
msgid "Only run tests listed in the named file."
msgstr ""

#: ../../../<Run>:1
msgid "Optional path of a manual worker grouping file to use for the run"
msgstr ""

#: ../../../<Run>:1
msgid ""
"Randomize the test order after they are partitioned into separate workers"
msgstr ""

#: ../../../<Run>:1
msgid "Repeat the run again and again until failure occurs."
msgstr ""

#: ../../../<Run>:1
msgid "Run each test id in a separate test runner."
msgstr ""

#: ../../../<Run>:1
msgid "Run only tests known to be failing."
msgstr ""

#: ../../../<Run>:1
msgid "Run tests in a serial process."
msgstr ""

#: ../../../<Run>:1
msgid "Run the tests for a project and store them into the repository."
msgstr ""

#: ../../../<Run>:1
msgid "Search the last test run for 2-test test isolation interactions."
msgstr ""

#: ../../../<Run>:1
msgid ""
"Takes in a single test to bypasses test discover and just execute the test "
"specified. A file may be used in place of a test name."
msgstr ""

#: ../../../<Run>:1
msgid ""
"Without --subunit, the process exit code will be non-zero if the test run "
"was not successful. However, with --subunit, the process exit code is non-"
"zero only if the subunit stream could not be generated successfully. The "
"test results and run status are included in the subunit stream, so the "
"stream should be used to determining the result of the run instead of the "
"exit code when using the --subunit flag."
msgstr ""

#: ../../../<Slowest>:1
msgid "Show the slowest tests from the last test run."
msgstr ""

#: ../../../<Slowest>:1
msgid "Show timing for all tests."
msgstr ""

#: ../../../<Slowest>:1
msgid "This command shows a table, with the longest running tests at the top."
msgstr ""

#: ../../../<Slowest>:None:
msgid "failing"
msgstr ""

#: ../../../<Slowest>:None:
msgid "init"
msgstr ""

#: ../../../<Slowest>:None:
msgid "last"
msgstr ""

#: ../../../<Slowest>:None:
msgid "list"
msgstr ""

#: ../../../<Slowest>:None:
msgid "load"
msgstr ""

#: ../../../<Slowest>:None:
msgid "run"
msgstr ""

#: ../../../<Slowest>:None:
msgid "slowest"
msgstr ""

#: ../../../<StestrCLI>:1
msgid "A parallel Python test runner built around subunit"
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"An optional path to a default user config file if one is not specified ~/."
"stestr.yaml and ~/.config/stestr.yaml will be tried in that order"
msgstr ""

#: ../../../<StestrCLI>:1
msgid "Increase verbosity of output. Can be repeated."
msgstr ""

#: ../../../<StestrCLI>:1
msgid "Select the repo backend to use"
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set a group regex to use for grouping tests together in the stestr scheduler."
" If both this and the corresponding config file option are set this value "
"will be used."
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set a stestr config file to use with this command. If one isn't specified "
"then .stestr.conf in the directory that a command is running from is used"
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set the directory or url that a command should run from. This affects all "
"default path lookups but does not affect paths supplied to the command."
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set the flag to group tests by class. NOTE: This flag takes priority over "
"the `--group-regex` option even if it's set."
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set the repo url to use. An acceptable value for this depends on the "
"repository type used."
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set the test path to use for unittest discovery. If both this and the "
"corresponding config file option are set, this value will be used."
msgstr ""

#: ../../../<StestrCLI>:1
msgid ""
"Set the top dir to use for unittest discovery. If both this and the "
"corresponding config file option are set, this value will be used."
msgstr ""

#: ../../../<StestrCLI>:1
msgid "Show tracebacks on errors."
msgstr ""

#: ../../../<StestrCLI>:1
msgid "Specify a file to log output. Disabled by default."
msgstr ""

#: ../../../<StestrCLI>:1
msgid "Suppress output except warnings and errors."
msgstr ""

#: ../../../<StestrCLI>:1
msgid "show program's version number and exit"
msgstr ""

#: ../../source/CONTRIBUTING.rst:2
#, fuzzy
msgid "Contributing"
msgstr "コントリビューション方法"

#: ../../source/CONTRIBUTING.rst:4
msgid ""
"To browse the latest code, see: https://github.com/mtreinish/stestr To clone "
"the latest code, use: ``git clone https://github.com/mtreinish/stestr.git``"
msgstr ""
"最新コードの参照: https://github.com/mtreinish/stestr最新コードのクローン: ``git clone https://"
"github.com/mtreinish/stestr.git``"

#: ../../source/CONTRIBUTING.rst:7
msgid ""
"Guidelines for contribution are documented at: http://stestr.readthedocs.io/"
"en/latest/developer_guidelines.html"
msgstr ""
"コントリビューションのガイドラインドキュメント: http://stestr.readthedocs.io/en/latest/"
"developer_guidelines.html"

#: ../../source/CONTRIBUTING.rst:9
msgid ""
"Use `github pull requests`_ to submit patches. Before you submit a pull "
"request ensure that all the automated testing will pass by running ``tox`` "
"locally. This will run the test suite and also the automated style rule "
"checks just as they will in CI. If CI fails on your change it will not be "
"able to merge."
msgstr ""
"パッチを出すためには、`github pull requests`_ を使用してください。プルリクエストを出す前には、手元の環境で ``tox`` "
"を実行して、すべての自動テストがパスすることを確認してください。これは、CI環境で実行されるものと同様のテストスイートならびに、自動スタイルチェックを実行します。もし、あなたの変更により、CI "
"が fail となった場合、その変更はマージすることができません。"

#: ../../source/MANUAL.rst:4
msgid "stestr user manual"
msgstr ""

#: ../../source/MANUAL.rst:7
msgid "Usage"
msgstr ""

#: ../../source/MANUAL.rst:16
msgid "Overview"
msgstr "概要"

#: ../../source/MANUAL.rst:18
msgid ""
"stestr is an application for running and tracking test results. Any test run "
"that can be represented as a subunit stream can be inserted into a "
"repository. However, the test running mechanism assumes python is being used."
" It is originally forked from the testrepository project so the usage is "
"similar."
msgstr ""

#: ../../source/MANUAL.rst:23
msgid "A typical basic example workflow is::"
msgstr ""

#: ../../source/MANUAL.rst:30
msgid ""
"Most commands in testr have comprehensive online help, and the commands::"
msgstr ""

#: ../../source/MANUAL.rst:35
msgid "Will be useful to explore the system."
msgstr ""

#: ../../source/MANUAL.rst:38
msgid "Configuration"
msgstr ""

#: ../../source/MANUAL.rst:40
msgid ""
"To configure stestr for a project you can write a stestr configuration file. "
"This lets you set basic information about how tests are run for a project. "
"By default the config file needs to be ``.stestr.conf`` in the same "
"directory that stestr is run from, normally the root of a project's "
"repository. However, the ``--config``/``-c`` CLI argument can specify an "
"alternate path for it."
msgstr ""

#: ../../source/MANUAL.rst:46
msgid ""
"The 2 most important options in the stestr config file are ``test_path`` and "
"``top_dir``. These 2 options are used to set the `unittest discovery`_ "
"options for stestr. (test_path is the same as ``--start-directory`` and "
"top_dir is the same as ``--top-level-directory`` in the doc) Only test_path "
"is a required field in the config file, if top_dir is not specified it "
"defaults to ``./``. It's also worth noting that shell variables for these 2 "
"config options (and only these 2 options) are expanded on platforms that "
"have a shell. This enables you to have conditional discovery paths based on "
"your environment."
msgstr ""

#: ../../source/MANUAL.rst:57
msgid "For example, having a config file like::"
msgstr ""

#: ../../source/MANUAL.rst:62
msgid ""
"will let you override the discovery start path using the TEST_PATH "
"environment variable."
msgstr ""

#: ../../source/MANUAL.rst:65
msgid "A full example config file is::"
msgstr ""

#: ../../source/MANUAL.rst:73
msgid ""
"The ``group_regex`` option is used to specify is used to provide a scheduler "
"hint for how tests should be divided between test runners. See the :ref:"
"`group_regex` section for more information on how this works. You can also "
"specify the ``parallel_class=True`` instead of group_regex to group tests in "
"the stestr scheduler together by class. Since this is a common use case this "
"enables that without needing to memorize the complicated regex for "
"``group_regex`` to do this."
msgstr ""

#: ../../source/MANUAL.rst:82
msgid ""
"There is also an option to specify all the options in the config file via "
"the CLI. This way you can run stestr directly without having to write a "
"config file and manually specify the test_path like above with the ``--test-"
"path``/``-t`` CLI argument."
msgstr ""

#: ../../source/MANUAL.rst:88
msgid "Running tests"
msgstr ""

#: ../../source/MANUAL.rst:90
msgid ""
"To run tests the ``stestr run`` command is used. By default this will run "
"all tests discovered using the discovery parameters in the stestr config "
"file."
msgstr ""

#: ../../source/MANUAL.rst:93
msgid ""
"If you'd like to avoid the overhead of test discovery and just manually "
"execute a single test (test class, or module) you can do this using the ``--"
"no-discover``/``-n`` option. For example::"
msgstr ""

#: ../../source/MANUAL.rst:99
msgid ""
"you can also give it a file path and stestr will convert that to the proper "
"python path under the covers. (assuming your project don't manually mess "
"with import paths) For example::"
msgstr ""

#: ../../source/MANUAL.rst:105
msgid ""
"will also bypass discovery and directly call the test runner on the module "
"specified."
msgstr ""

#: ../../source/MANUAL.rst:108
msgid ""
"Additionally you can specify a specific class or method within that file "
"using ``::`` to specify a class and method. For example::"
msgstr ""

#: ../../source/MANUAL.rst:113
msgid ""
"will skip discovery and directly call the test runner on the test method in "
"the specified test class."
msgstr ""

#: ../../source/MANUAL.rst:117
msgid "Test Selection"
msgstr ""

#: ../../source/MANUAL.rst:119
msgid ""
"Arguments passed to ``stestr run`` are used to filter test ids that will be "
"run. stestr will perform unittest discovery to get a list of all test ids "
"and then apply each argument as a regex filter. Tests that match any of the "
"given filters will be run. For example, if you called ``stestr run foo bar`` "
"this will only run the tests that have a regex match with foo **or** a regex "
"match with bar."
msgstr ""

#: ../../source/MANUAL.rst:126
msgid ""
"stestr allows you do to do simple test exclusion via passing a rejection/"
"black regexp::"
msgstr ""

#: ../../source/MANUAL.rst:131
msgid "stestr also allow you to combine these arguments::"
msgstr ""

#: ../../source/MANUAL.rst:135
msgid ""
"Here first we selected all tests which matches to ``ui\\.interface``, then "
"we are dropping all test which matches ``slow_tests|bad_tests`` from the "
"final list."
msgstr ""

#: ../../source/MANUAL.rst:139
msgid ""
"stestr also allows you to specify a blacklist file to define a set of "
"regexes to exclude. You can specify a blacklist file with the ``--blacklist-"
"file``/``-b`` option, for example::"
msgstr ""

#: ../../source/MANUAL.rst:145
msgid ""
"The format for the file is line separated regex, with ``#`` used to signify "
"the start of a comment on a line. For example::"
msgstr ""

#: ../../source/MANUAL.rst:152
msgid ""
"The regexp used in the blacklist file or passed as argument, will be used to "
"drop tests from the initial selection list. It will generate a list which "
"will exclude any tests matching ``^regex1`` or ``.*regex2``. If a blacklist "
"file is used in conjunction with the normal filters then the regex filters "
"passed in as an argument regex will be used for the initial test selection, "
"and the exclusion regexes from the blacklist file on top of that."
msgstr ""

#: ../../source/MANUAL.rst:159
msgid ""
"The dual of the blacklist file is the whitelist file which will include any "
"tests matching the regexes in the file. You can specify the path to the file "
"with ``--whitelist-file``/``-w``, for example::"
msgstr ""

#: ../../source/MANUAL.rst:165
msgid ""
"The format for the file is more or less identical to the blacklist file::"
msgstr ""

#: ../../source/MANUAL.rst:171
msgid "However, instead of excluding the matches it will include them."
msgstr ""

#: ../../source/MANUAL.rst:173
msgid ""
"It's also worth noting that you can use the test list option to dry run any "
"selection arguments you are using. You just need to use ``stestr list`` with "
"your selection options to do this, for example::"
msgstr ""

#: ../../source/MANUAL.rst:179
msgid ""
"This will list all the tests which will be run by stestr using that "
"combination of arguments."
msgstr ""

#: ../../source/MANUAL.rst:183
msgid "Adjusting test run output"
msgstr ""

#: ../../source/MANUAL.rst:185
msgid ""
"By default the ``stestr run`` command uses an output filter called subunit-"
"trace. (as does the ``stestr last`` command) This displays the tests as they "
"are finished executing, as well as their worker and status. It also prints "
"aggregate numbers about the run at the end. You can read more about subunit-"
"trace in the module doc: :ref:`subunit_trace`."
msgstr ""

#: ../../source/MANUAL.rst:191
msgid ""
"However, the test run output is configurable, you can disable this output "
"with the ``--no-subunit-trace`` flag which will be completely silent except "
"for any failures it encounters. There is also the ``--color`` flag which "
"will enable colorization with subunit-trace output. If you prefer to deal "
"with the raw subunit yourself and run your own output rendering or filtering "
"you can use the ``--subunit`` flag to output the result stream as raw "
"subunit v2."
msgstr ""

#: ../../source/MANUAL.rst:198
msgid ""
"There is also an ``--abbreviate`` flag available, when this is used a single "
"character is printed for each test as it is executed. A ``.`` is printed for "
"a successful test, a ``F`` for a failed test, and a ``S`` for a skipped test."
""
msgstr ""

#: ../../source/MANUAL.rst:202
msgid ""
"In the default subunit-trace output any captured output to stdout and stderr "
"is printed after test execution, for both successful and failed tests. "
"However, in some cases printing these attachments on a successful tests is "
"not the preferred behavior. You can use the ``--suppress-attachments`` flag "
"to disable printing stdout or stderr attachments for successful tests."
msgstr ""

#: ../../source/MANUAL.rst:208
msgid ""
"While by default attachments for captured stdout and stderr are printed, it "
"is also possible that a test has other text attachments (a common example is "
"python logging) which are not printed on successful test execution, only on "
"failures. If you would like to have these attachments also printed for "
"successful tests you can use the ``--all-attachments`` flag to print all "
"text attachments on both successful and failed tests. Both ``--all-"
"attachments`` and ``--suppress-attachments`` can not be set at the same time."
" If both are set in the user config file then the ``suppress-attachments`` "
"flag will take priority and no attachments will be printed for successful "
"tests. If either ``--suppress-attachments`` or ``--all-attachments`` is set "
"via the CLI it will take precedence over matching options set in the user "
"config file."
msgstr ""

#: ../../source/MANUAL.rst:221
msgid "Combining Test Results"
msgstr ""

#: ../../source/MANUAL.rst:222
msgid ""
"There is sometimes a use case for running a single test suite split between "
"multiple invocations of the stestr run command. For example, running a "
"subset of tests with a different concurrency. In these cases you can use the "
"``--combine`` flag on ``stestr run``. When this flag is specified stestr "
"will append the subunit stream from the test run into the most recent entry "
"in the repository."
msgstr ""

#: ../../source/MANUAL.rst:229
msgid ""
"Alternatively, you can manually load the test results from a subunit stream "
"into an existing test result in the repository using the ``--id``/``-i`` "
"flag on the ``stestr load`` command. This will append the results from the "
"input subunit stream to the specified id."
msgstr ""

#: ../../source/MANUAL.rst:236
msgid "Running previously failed tests"
msgstr ""

#: ../../source/MANUAL.rst:238
msgid ""
"``stestr run`` also enables you to run just the tests that failed in the "
"previous run. To do this you can use the ``--failing`` argument."
msgstr ""

#: ../../source/MANUAL.rst:241
msgid "A common workflow using this is:"
msgstr ""

#: ../../source/MANUAL.rst:243
msgid "Run tests (and some fail)::"
msgstr ""

#: ../../source/MANUAL.rst:247
msgid "Fix currently broken tests - repeat until there are no failures::"
msgstr ""

#: ../../source/MANUAL.rst:251
msgid ""
"Do a full run to find anything that regressed during the reduction process::"
msgstr ""

#: ../../source/MANUAL.rst:255
msgid ""
"Another common use case is repeating a failure that occurred on a remote "
"machine (e.g. during a jenkins test run). There are a few common ways to do "
"approach this."
msgstr ""

#: ../../source/MANUAL.rst:259
msgid ""
"Firstly, if you have a subunit stream from the run you can just load it::"
msgstr ""

#: ../../source/MANUAL.rst:263
msgid "and then run the tests which failed from that loaded run::"
msgstr ""

#: ../../source/MANUAL.rst:267
msgid ""
"If using a file type repository (which is the default) the streams generated "
"by test runs are in the repository path, which defaults to *.stestr/* in the "
"working directory, and stores the stream in a file named for their run id - "
"e.g. .stestr/0 is the first run."
msgstr ""

#: ../../source/MANUAL.rst:273
msgid ""
"For right now these files are stored in the subunit v1 format, but all of "
"the stestr commands, including load, only work with the subunit v2 format. "
"This can be converted using the **subunit-1to2** tool in the `python-"
"subunit`_ package."
msgstr ""

#: ../../source/MANUAL.rst:280
msgid ""
"If you have access to the remote machine you can also get the subunit stream "
"by running::"
msgstr ""

#: ../../source/MANUAL.rst:285
msgid ""
"This is often a bit easier than trying to manually pull the stream file out "
"of the .stestr directory. (also it will be in the subunit v2 format already)"
msgstr ""

#: ../../source/MANUAL.rst:288
msgid ""
"If you do not have a stream or access to the machine you may be able to use "
"a list file. If you can get a file that contains one test id per line, you "
"can run the named tests like this::"
msgstr ""

#: ../../source/MANUAL.rst:294
msgid ""
"This can also be useful when dealing with sporadically failing tests, or "
"tests that only fail in combination with some other test - you can bisect "
"the tests that were run to get smaller and smaller (or larger and larger) "
"test subsets until the error is pinpointed."
msgstr ""

#: ../../source/MANUAL.rst:299
msgid ""
"``stestr run --until-failure`` will run your test suite again and again and "
"again stopping only when interrupted or a failure occurs. This is useful for "
"repeating timing-related test failures."
msgstr ""

#: ../../source/MANUAL.rst:304
msgid "Listing tests"
msgstr ""

#: ../../source/MANUAL.rst:306
msgid ""
"To see a list of tests found by stestr you can use the ``stestr list`` "
"command. This will list all tests found by discovery."
msgstr ""

#: ../../source/MANUAL.rst:309
msgid ""
"You can also use this to see what tests will be run by a given stestr run "
"command. For instance, the tests that ``stestr run myfilter`` will run are "
"shown by ``stestr list myfilter``. As with the run command, arguments to "
"list are used to regex filter the tests."
msgstr ""

#: ../../source/MANUAL.rst:315
msgid "Parallel testing"
msgstr ""

#: ../../source/MANUAL.rst:317
msgid ""
"stestr lets you run tests in parallel by default. So, it actually does this "
"by def::"
msgstr ""

#: ../../source/MANUAL.rst:322
msgid ""
"This will first list the tests, partition the tests into one partition per "
"CPU on the machine, and then invoke multiple test runners at the same time, "
"with each test runner getting one partition. Currently the partitioning "
"algorithm is simple round-robin for tests that stestr has not seen run "
"before, and equal-time buckets for tests that stestr has seen run."
msgstr ""

#: ../../source/MANUAL.rst:328
msgid ""
"To determine how many CPUs are present in the machine, stestr will use the "
"multiprocessing Python module On operating systems where this is not "
"implemented, or if you need to control the number of workers that are used, "
"the ``--concurrency`` option will let you do so::"
msgstr ""

#: ../../source/MANUAL.rst:335
msgid ""
"When running tests in parallel, stestr adds a tag for each test to the "
"subunit stream to show which worker executed that test. The tags are of the "
"form ``worker-%d`` and are usually used to reproduce test isolation "
"failures, where knowing exactly what test ran on a given worker is important."
" The %d that is substituted in is the partition number of tests from the "
"test run - all tests in a single run with the same worker-N ran in the same "
"test runner instance."
msgstr ""

#: ../../source/MANUAL.rst:342
msgid ""
"To find out which slave a failing test ran on just look at the 'tags' line "
"in its test error::"
msgstr ""

#: ../../source/MANUAL.rst:351
msgid "And then find tests with that tag::"
msgstr ""

#: ../../source/MANUAL.rst:358
msgid "Grouping Tests"
msgstr ""

#: ../../source/MANUAL.rst:360
msgid ""
"In certain scenarios you may want to group tests of a certain type together "
"so that they will be run by the same worker process. The ``group_regex`` "
"option in the stestr config file permits this. When set, tests are grouped "
"by the entire matching portion of the regex. The match must begin at the "
"start of the string. Tests with no match are not grouped."
msgstr ""

#: ../../source/MANUAL.rst:366
msgid ""
"For example, setting the following option in the stestr config file will "
"group tests in the same class together (the last '.' splits the class and "
"test method)::"
msgstr ""

#: ../../source/MANUAL.rst:372
msgid ""
"However, because grouping tests at the class level is a common use case "
"there is also a config option, ``parallel_class``, to do this. For example, "
"you can use::"
msgstr ""

#: ../../source/MANUAL.rst:378
msgid "and it will group tests in the same class together."
msgstr ""

#: ../../source/MANUAL.rst:381
msgid ""
"This ``parallel_class`` option takes priority over the ``group_regex`` "
"option. And if both on the CLI and in the config are set, we use the option "
"on the CLI not in a config file. For example, ``--group-regex`` on the CLI "
"and ``parallel-class`` in a config file are set, ``--group-regex`` is higer "
"priority than ``parallel-class`` in this case."
msgstr ""

#: ../../source/MANUAL.rst:389
msgid "Test Scheduling"
msgstr ""

#: ../../source/MANUAL.rst:390
msgid ""
"By default stestr schedules the tests by first checking if there is any "
"historical timing data on any tests. It then sorts the tests by that timing "
"data loops over the tests in order and adds one to each worker that it will "
"launch. For tests without timing data, the same is done, except the tests "
"are in alphabetical order instead of based on timing data. If a group regex "
"is used the same algorithm is used with groups instead of individual tests."
msgstr ""

#: ../../source/MANUAL.rst:397
msgid ""
"However there are options to adjust how stestr will schedule tests. The "
"primary option to do this is to manually schedule all the tests run. To do "
"this use the ``--worker-file`` option for stestr run. This takes a path to a "
"yaml file that instructs stestr how to run tests. It is formatted as a list "
"of dicts with a single element each with a list describing the tests to run "
"on each worker. For example::"
msgstr ""

#: ../../source/MANUAL.rst:411
msgid ""
"would create 2 workers. The first would run all tests that match regex 1, "
"and the second would run all tests that match regex 2 or regex 3. In "
"addition if you need to mix manual scheduling and the standard scheduling "
"mechanisms you can accomplish this with the ``concurrency`` field on a "
"worker in the yaml. For example, building on the previous example::"
msgstr ""

#: ../../source/MANUAL.rst:428
msgid ""
"In this case the tests that match regex 4 will be run against 3 workers and "
"the tests will be partitioned across those workers with the normal scheduler."
" This includes respecting the other scheduler options, like ``group_regex`` "
"or ``--random``."
msgstr ""

#: ../../source/MANUAL.rst:433
msgid ""
"There is also an option on ``stestr run``, ``--random``/``-r`` to randomize "
"the order of tests as they are passed to the workers. This is useful in "
"certain use cases, especially when you want to test isolation between test "
"cases."
msgstr ""

#: ../../source/MANUAL.rst:439
msgid "User Config Files"
msgstr ""

#: ../../source/MANUAL.rst:441
msgid ""
"If you prefer to have a different default output or setting for a particular "
"command stestr enables you to write a user config file to overide the "
"defaults for some options on some commands. By default stestr will look for "
"this config file in ``~/.stestr.yaml`` and ``~/.config/stestr.yaml`` in that "
"order. You can also specify the path to a config file with the ``--user-"
"config`` parameter."
msgstr ""

#: ../../source/MANUAL.rst:448
msgid ""
"The config file is a yaml file that has a top level key for the command and "
"then a sub key for each option. For an example, a fully populated config "
"file that changes the default on all available options in the config file is:"
":"
msgstr ""

#: ../../source/MANUAL.rst:476
msgid ""
"If you choose to use a user config file you can specify any subset of the "
"options and commands you choose."
msgstr ""

#: ../../source/MANUAL.rst:480
msgid "Automated test isolation bisection"
msgstr ""

#: ../../source/MANUAL.rst:482
msgid ""
"As mentioned above, its possible to manually analyze test isolation issues "
"by interrogating the repository for which tests ran on which worker, and "
"then creating a list file with those tests, re-running only half of them, "
"checking the error still happens, rinse and repeat."
msgstr ""

#: ../../source/MANUAL.rst:487
msgid "However that is tedious. stestr can perform this analysis for you::"
msgstr ""

#: ../../source/MANUAL.rst:491
msgid "will perform that analysis for you. The process is:"
msgstr ""

#: ../../source/MANUAL.rst:493
msgid ""
"The last run in the repository is used as a basis for analysing against - "
"tests are only cross checked against tests run in the same worker in that "
"run. This means that failures accrued from several different runs would not "
"be processed with the right basis tests - you should do a full test run to "
"seed your repository. This can be local, or just stestr load a full run from "
"your Jenkins or other remote run environment."
msgstr ""

#: ../../source/MANUAL.rst:500
msgid ""
"Each test that is currently listed as a failure is run in a test process "
"given just that id to run."
msgstr ""

#: ../../source/MANUAL.rst:503
msgid ""
"Tests that fail are excluded from analysis - they are broken on their own."
msgstr ""

#: ../../source/MANUAL.rst:505
msgid "The remaining failures are then individually analysed one by one."
msgstr ""

#: ../../source/MANUAL.rst:507
msgid ""
"For each failing, it gets run in one work along with the first 1/2 of the "
"tests that were previously run prior to it."
msgstr ""

#: ../../source/MANUAL.rst:510
msgid ""
"If the test now passes, that set of prior tests are discarded, and the other "
"half of the tests is promoted to be the full list. If the test fails then "
"other other half of the tests are discarded and the current set promoted."
msgstr ""

#: ../../source/MANUAL.rst:515
msgid ""
"Go back to running the failing test along with 1/2 of the current list of "
"priors unless the list only has 1 test in it. If the failing test still "
"failed with that test, we have found the isolation issue. If it did not then "
"either the isolation issue is racy, or it is a 3-or-more test isolation "
"issue. Neither of those cases are automated today."
msgstr ""

#: ../../source/MANUAL.rst:522
msgid "Forcing isolation"
msgstr ""

#: ../../source/MANUAL.rst:524
msgid ""
"Sometimes it is useful to force a separate test runner instance for each "
"test executed. The ``--isolated`` flag will cause stestr to execute a "
"separate runner per test::"
msgstr ""

#: ../../source/MANUAL.rst:530
msgid ""
"In this mode stestr first determines tests to run (either automatically "
"listed, using the failing set, or a user supplied load-list), and then "
"spawns one test runner per test it runs. To avoid cross-test-runner "
"interactions concurrency is disabled in this mode. ``--analyze-isolation`` "
"supersedes ``--isolated`` if they are both supplied."
msgstr ""

#: ../../source/MANUAL.rst:537
msgid "Repositories"
msgstr ""

#: ../../source/MANUAL.rst:539
msgid ""
"stestr uses a data repository to keep track of test previous test runs. "
"There are different backend types that each offer different advantages. "
"There are currently 2 repository types to choose from, **file** and **sql**."
msgstr ""

#: ../../source/MANUAL.rst:543
msgid ""
"You can choose which repository type you want with the ``--repo-type``/``-"
"r`` cli flag. **file** is the current default."
msgstr ""

#: ../../source/MANUAL.rst:546
msgid ""
"You can also specify an alternative repository with the ``--repo-url``/``-"
"u`` cli flags. The default value for a **file** repository type is to use "
"the directory: ``$CWD/.stestr``. For a **sql** repository type is to use a "
"sqlite database located at: ``$CWD/.stestr.sqlite``."
msgstr ""

#: ../../source/MANUAL.rst:551
msgid "Make sure you put these flags before the cli subcommand"
msgstr ""

#: ../../source/MANUAL.rst:553
msgid ""
"Different repository types that use local storage will conflict with each "
"other in the same directory. If you initialize one repository type and then "
"try to use another in the same directory, it will not work."
msgstr ""

#: ../../source/MANUAL.rst:559
msgid "File"
msgstr ""

#: ../../source/MANUAL.rst:560
msgid ""
"The default stestr repository type has a very simple disk structure. It "
"contains the following files:"
msgstr ""

#: ../../source/MANUAL.rst:563
msgid ""
"format: This file identifies the precise layout of the repository, in case "
"future changes are needed."
msgstr ""

#: ../../source/MANUAL.rst:566
msgid ""
"next-stream: This file contains the serial number to be used when adding "
"another stream to the repository."
msgstr ""

#: ../../source/MANUAL.rst:569
msgid ""
"failing: This file is a stream containing just the known failing tests. It "
"is updated whenever a new stream is added to the repository, so that it only "
"references known failing tests."
msgstr ""

#: ../../source/MANUAL.rst:573
msgid ""
"#N - all the streams inserted in the repository are given a serial number."
msgstr ""

#: ../../source/MANUAL.rst:576
msgid "SQL"
msgstr ""

#: ../../source/MANUAL.rst:577
msgid ""
"This is an experimental repository backend, that is based on the "
"`subunit2sql`_ library. It's currently still under development and should be "
"considered experimental for the time being. Eventually it'll replace the "
"File repository type"
msgstr ""

#: ../../source/MANUAL.rst:582
msgid ""
"The sql repository type requirements are not installed by default. They are "
"listed under the 'sql' setuptools extras. You can install them with pip by "
"running: ``pip install 'stestr[sql]'``"
msgstr ""

#: ../../source/README.rst:20
msgid ""
"You can see the full rendered docs at: http://stestr.readthedocs.io/en/"
"latest/"
msgstr "フルレンダリングされたドキュメントはこちら:http://stestr.readthedocs.io/en/latest/"

#: ../../source/README.rst:21
msgid ""
"The code of the project is on Github: https://github.com/mtreinish/stestr"
msgstr "プロジェクトのコードは GitHub にあります: https://github.com/mtreinish/stestr"

#: ../../source/README.rst:23
msgid ""
"stestr v2.x.x release series will be the last series that supports Python 2. "
"Support for Python 2.7 will be dropped in stestr release 3.0.0 which is "
"being planned for early 2020."
msgstr ""
"stestr v2.x.x リリースシリーズは、Python 2 をサポートする最後のシリーズとなります。Python 2."
"7のサポートは、2020年の早い時期に予定されている、「stestr リリース 3.0.0」にて打ち切られる予定です"

#: ../../source/README.rst:30
msgid ""
"stestr is parallel Python test runner designed to execute `unittest`_ test "
"suites using multiple processes to split up execution of a test suite. It "
"also will store a history of all test runs to help in debugging failures and "
"optimizing the scheduler to improve speed. To accomplish this goal it uses "
"the `subunit`_ protocol to facilitate streaming and storing results from "
"multiple workers."
msgstr ""
"stestr は、パラレル Python テスト実行プログラムであり、一つのテストスイートを、分割実行するために、複数プロセスを使い、 "
"`unittest`_ "
"テストスイートを実行するようデザインされています。また、実行失敗のデバッグや実行速度改善に向けたスケジューラ最適化のために、すべてのテスト実行履歴を保存しています。この目標達成のため "
"stestrでは、 `subunit`_ プロトコルを使用し、ストリーミングや複数ワーカーからの結果を保存することを容易にしています。"

#: ../../source/README.rst:40
msgid ""
"stestr originally started as a fork of the `testrepository`_ project. But, "
"instead of being an interface for any test runner that used subunit, like "
"testrepository, stestr concentrated on being a dedicated test runner for "
"python projects. While stestr was originally forked from testrepository it "
"is not backwards compatible with testrepository. At a high level the basic "
"concepts of operation are shared between the two projects but the actual "
"usage is not exactly the same."
msgstr ""
"stestr は、元々 `testrepository`_ プロジェクトのフォークとして始まりました。しかし、subunit を使用する "
"testrepository のようなあらゆるテストランナーインターフェースとなる代わりに、stestr は、python "
"プロジェクトに特化・集中したテストランナーです。stestr は、元々 testrepository "
"からフォークしましたが、testrepository "
"との後方互換性はありません。高いレベルでの基本的な実行コンセプトは、それら2つのプロジェクトの間で共有されているものの、実際の使用法は、完全に同一というわけでありません。"

#: ../../source/README.rst:52
msgid "Installing stestr"
msgstr "stestr のインストール"

#: ../../source/README.rst:54
msgid "stestr is available via pypi, so all you need to do is run::"
msgstr "stestr は、pypi 経由で利用可能です。そのため、以下を実行するだけで::"

#: ../../source/README.rst:58
msgid ""
"to get stestr on your system. If you need to use a development version of "
"stestr you can clone the repo and install it locally with::"
msgstr ""
"あなたのシステムに、stestr を取得することができます。もし、開発バージョンのstestr "
"を使う必要があれば、リポジトリをクローンし、ローカルにインストールすることができます::"

#: ../../source/README.rst:63
msgid ""
"which will install stestr in your python environment in editable mode for "
"local development"
msgstr "この操作で、stestr をあなたの python 環境のローカル開発環境に対し、編集可能モードでインストールできます。"

#: ../../source/README.rst:67
msgid "Using stestr"
msgstr "stestr の利用"

#: ../../source/README.rst:69
msgid ""
"After you install stestr to use it to run tests is pretty straightforward. "
"The first thing you'll want to do is create a ``.stestr.conf`` file for your "
"project. This file is used to tell stestr where to find tests and basic "
"information about how tests are run. A basic minimal example of the contents "
"of this is::"
msgstr ""
"stestr のインストール後、テスト実行のために使う方法は、とても簡単です。まずはじめに、``.stestr.conf`` "
"ファイルをあなたのプロジェクトのために作成します。このファイルは、「どこにテストがあるのか」「どうやってテストを実行するのか」という基本的な情報を "
"stestr に伝えます。基本最小限の設定例としては次のようなものとなります::"

#: ../../source/README.rst:78
msgid ""
"which just tells stestr the relative path for the directory to use for test "
"discovery. This is the same as ``--start-directory`` in the standard "
"`unittest discovery`_."
msgstr ""
"この記述は、テスト探索のために使われるディレクトリの相対パスを、stestr に伝えます。これは、標準的な `unittest discovery`_ "
"の ``--start-directory`` と同様です。"

#: ../../source/README.rst:84
msgid ""
"After this file is created you should be all set to start using stestr to "
"run tests. To run tests just use::"
msgstr ""
"このファイルを作成すれば、stestr を使い始めるためにやるべきことはすべて完了です。テストを実行するためには、単に次のように使うだけです::"

#: ../../source/README.rst:89
msgid ""
"it will first create a results repository at ``.stestr/`` in the current "
"working directory and then execute all the tests found by test discovery. If "
"you're just running a single test (or module) and want to avoid the overhead "
"of doing test discovery you can use the ``--no-discover``/``-n`` option to "
"specify that test."
msgstr ""
"これにより、まず、結果を保持するためのリポジトリが、カレントワーキングディレクトリの ``.stestr/`` "
"に作成され、テスト探索により見つかったテストがすべて実行されます。もし、あなたが、単にひとつのテスト（あるいはモジュール）を実行し、テスト探索によるオーバーヘッドを避けたいのであれば、``-"
"-no-discover``もしくは ``-n`` オプションをそのテストに対して指定し、実行することにより可能です。"

#: ../../source/README.rst:95
msgid ""
"For all the details on these commands and more thorough explanation of "
"options see the stestr manual: https://stestr.readthedocs.io/en/latest/"
"MANUAL.html"
msgstr ""
"これらのコマンドの詳細は、さらなるオプションの説明は、stestr マニュアルを参照してください: https://stestr.readthedocs."
"io/en/latest/MANUAL.html"

#: ../../source/README.rst:99
msgid "Migrating from testrepository"
msgstr "testrepository からの移行"

#: ../../source/README.rst:101
msgid ""
"If you have a project that is already using testrepository stestr's source "
"repo contains a helper script for migrating your repo to use stestr. This "
"script just creates a ``.stestr.conf`` file from a ``.testr.conf`` file. "
"(assuming it uses a standard subunit.run test command format) To run this "
"from your project repo just call::"
msgstr ""
"もし、testrepository を既に使用しているプロジェクトを持っているのであれば、stestr のソースリポジトリには、あなたのリポジトリを "
"stestr を利用するように移行するための、ヘルパースクリプトがあります。このスクリプトは、単に、``.testr.conf`` ファイルから、 ``."
"stestr.conf`` ファイルを作成します。（標準的な subunit.run "
"テストコマンド形式を利用していることを想定しています）これを実行するためには、あなたのプロジェクトリポジトリで、以下を実行します::"

#: ../../source/README.rst:109
msgid "and you'll have a ``.stestr.conf`` created."
msgstr "これにより、 ``.stestr.conf`` が作成されます。"

#: ../../source/README.rst:112
msgid "Building a manpage"
msgstr "manpage の生成"

#: ../../source/README.rst:114
msgid ""
"The stestr manual has been formatted so that it renders well as html and as "
"a manpage. The html output and is autogenerated and published to: https://"
"stestr.readthedocs.io/en/latest/MANUAL.html but the manpage has to be "
"generated by hand. To do this you have to manually run sphinx-build with the "
"manpage builder. This has been automated in a small script that should be "
"run from the root of the stestr repository::"
msgstr ""
"stestr マニュアルは、htmlと同様に、manpage としてもレンダリングするために整形されています。html "
"出力物と自動生成され公開されているものはこちらです:https://stestr.readthedocs.io/en/latest/MANUAL."
"html しかしながら、その manpageは、手動で生成する必要があります。このためには、手動で sphinx-build コマンドをmanpage "
"builder とともに実行する必要があります。これは、簡単なスクリプトで自動化されており、 stestr "
"リポジトリのルートディレクトリで以下を実行します::"

#: ../../source/README.rst:123
msgid ""
"which will generate the troff file in doc/build/man/stestr.1 which is ready "
"to be packaged and or put in your system's man pages."
msgstr ""
"これにより、troff ファイルが doc/build/man/stestr.1 に作成され、それは、パッケージ可能で、あなたのシステムの man "
"page としても配置可能です。"

#: ../../source/README.rst:142
msgid "Community"
msgstr "コミュニティ"

#: ../../source/README.rst:144
msgid "Besides Github interactions there is also a stestr IRC channel:"
msgstr "GitHub でのやり取りに加え、stestr の IRC チャネルもあります:"

#: ../../source/README.rst:146
msgid "#stestr on Freenode"
msgstr "Freenode の #stestr チャネル"

#: ../../source/README.rst:148
msgid "feel free to join to ask questions, or just discuss stestr."
msgstr "stestr に関する質問、もしくは議論をしていますので、気軽に参加してください。"

#: ../../source/developer_guidelines.rst:4
msgid "Development Guidelines for stestr"
msgstr ""

#: ../../source/developer_guidelines.rst:7
msgid "Coding style"
msgstr ""

#: ../../source/developer_guidelines.rst:9
msgid ""
"PEP-8 is used for changes. We enforce running flake8 prior to landing any "
"commits."
msgstr ""

#: ../../source/developer_guidelines.rst:13
msgid "Testing and QA"
msgstr ""

#: ../../source/developer_guidelines.rst:15
msgid ""
"For stestr please add tests where possible. There is no requirement for one "
"test per change (because somethings are much harder to automatically test "
"than the benefit from such tests). But, if unit testing is reasonable it "
"will be expected to be present before it can merge."
msgstr ""

#: ../../source/developer_guidelines.rst:21
msgid "Running the tests"
msgstr ""

#: ../../source/developer_guidelines.rst:23
msgid ""
"Generally just ``tox`` is all that is needed to run all the tests. However "
"if dropping into pdb, it is currently more convenient to use ``python -m "
"testtools.run testrepository.tests.test_suite``."
msgstr ""

#: ../../source/index.rst:7
msgid "stestr"
msgstr ""

#: ../../source/index.rst:9
msgid "Contents:"
msgstr ""

#: ../../source/index.rst:23
msgid "Indices and tables"
msgstr ""

#: ../../source/index.rst:25
msgid ":ref:`genindex`"
msgstr ""

#: ../../source/internal_arch.rst:2
msgid "Internal Architecture"
msgstr ""

#: ../../source/internal_arch.rst:4
msgid ""
"This document is an attempt to explain at a high level how stestr is "
"constructed. It'll likely go stale quickly as the code changes, but "
"hopefully it'll be a useful starting point for new developers to understand "
"how the stestr is built. Full API documentation can be found at :ref:`api`. "
"It's also worth noting that any explanation of workflow or internal "
"operation is not necessarily an exact call path, but instead just a high "
"level explanation of how the components operate."
msgstr ""

#: ../../source/internal_arch.rst:13
msgid "Basic Structure"
msgstr ""

#: ../../source/internal_arch.rst:15
msgid ""
"At a high level there are a couple different major components to stestr: the "
"repository, and the cli layer."
msgstr ""

#: ../../source/internal_arch.rst:18
msgid ""
"The repository is how stestr stores all results from test runs and the "
"source of any data needed by any stestr operations that require past runs. "
"There are actually multiple repository types which are different "
"implementations of an abstract API. Right now there is only one complete "
"implementation, the file repository type, which is useful in practice but "
"that may not be the case in the future."
msgstr ""

#: ../../source/internal_arch.rst:25
msgid ""
"The CLI layer is where the different stestr commands are defined and "
"provides the command line interface for performing the different stestr "
"operations."
msgstr ""

#: ../../source/internal_arch.rst:29
msgid "CLI Layer"
msgstr ""

#: ../../source/internal_arch.rst:30
msgid ""
"The CLI layer is built using the `cliff.command`_ module. The stestr.cli "
"module defines a basic interface using cliff. Each subcommand has its own "
"module in stestr.commands and has 3 required functions to work properly:"
msgstr ""

#: ../../source/internal_arch.rst:35
#: ../../source/internal_arch.rst:45
msgid "get_parser(prog_name)"
msgstr ""

#: ../../source/internal_arch.rst:36
#: ../../source/internal_arch.rst:55
msgid "get_description()"
msgstr ""

#: ../../source/internal_arch.rst:37
#: ../../source/internal_arch.rst:62
msgid "take_action(parsed_args)"
msgstr ""

#: ../../source/internal_arch.rst:39
msgid ""
"NOTE: To keep the api compatibility in stestr.commands, we still have each "
"subcommands there."
msgstr ""

#: ../../source/internal_arch.rst:47
msgid ""
"This function is used to define subcommand arguments. It has a single "
"argparse parser object passed into it. The intent of this function is to "
"have any command specific arguments defined on the provided parser object by "
"calling `parser.add_argument()`_ for each argument."
msgstr ""

#: ../../source/internal_arch.rst:56
msgid ""
"The intent of this function is to return an command specific help "
"information. It is expected to return a string that will be used when the "
"subcommand is defined in argparse and will be displayed before the arguments "
"when ``--help`` is used on the subcommand."
msgstr ""

#: ../../source/internal_arch.rst:63
msgid ""
"This is where the real work for the command is performed. This is the "
"function that is called when the command is executed. This function is "
"called being wrapped by sys.exit() so an integer return is expected that "
"will be used for the command's return code. The arguments input parsed_args "
"is the argparse.Namespace object from the parsed CLI options."
msgstr ""

#: ../../source/internal_arch.rst:71
msgid "Operations for Running Tests"
msgstr ""

#: ../../source/internal_arch.rst:73
msgid ""
"The basic flow when stestr run is called at a high level is fairly straight "
"forward. In the default case when run is called the first operation "
"performed is unittest discovery which is used to get a complete list of "
"tests present. This list is then filtered by any user provided selection "
"mechanisms. (for example a cli regex filter) This is used to select which "
"tests the user actually intends to run. For more details on test selection "
"see: :ref:`api_selection` which defines the functions which are used to "
"actually perform the filtering."
msgstr ""

#: ../../source/internal_arch.rst:82
msgid ""
"Once there is complete list of tests that will be run the list gets passed "
"to the scheduler/partitioner. The scheduler takes the list of tests and "
"splits it into N groups where N is the concurrency that stestr will use to "
"run tests. If there is any timing data available in the repository from "
"previous runs this is used by the scheduler to try balancing the test load "
"between the workers. For the full details on how the partitioning is "
"performed see: :ref:`api_scheduler`."
msgstr ""

#: ../../source/internal_arch.rst:90
msgid ""
"With the tests split into multiple groups for each worker process we're "
"ready to start executing the tests. Each group of tests is used to launch a "
"test runner worker subprocess. As the name implies this is a test runner "
"that emits a subunit stream to stdout. These stdout streams are combined in "
"real time and stored in the repository at the end of the run (using the load "
"command). The combined stream is also used for the CLI output either in a "
"summary view or with a real time subunit output (which is enabled with the "
"``--subunit`` argument)"
msgstr ""

