# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016-2019, Matthew Treinish
# This file is distributed under the same license as the stestr package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: stestr trunk\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-05 11:58+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../source/README.rst:2
msgid "stestr"
msgstr ""

#: ../../source/README.rst:20
msgid ""
"You can see the full rendered docs at: "
"http://stestr.readthedocs.io/en/latest/"
msgstr ""
"フルレンダリングされたドキュメントはこちら:"
"http://stestr.readthedocs.io/en/latest/"

#: ../../source/README.rst:21
msgid "The code of the project is on Github: https://github.com/mtreinish/stestr"
msgstr "プロジェクトのコードは GitHub にあります: https://github.com/mtreinish/stestr"

#: ../../source/README.rst:23
msgid ""
"stestr v2.x.x release series will be the last series that supports Python"
" 2. Support for Python 2.7 will be dropped in stestr release 3.0.0 which "
"is being planned for early 2020."
msgstr ""
"stestr v2.x.x リリースシリーズは、Python 2 をサポートする最後のシリーズ"
"となります。Python 2.7のサポートは、2020年の早い時期に予定されている、"
"「stestr リリース 3.0.0」にて打ち切られる予定です"

#: ../../source/README.rst:28
msgid "Overview"
msgstr "概要"

#: ../../source/README.rst:30
msgid ""
"stestr is parallel Python test runner designed to execute `unittest`_ "
"test suites using multiple processes to split up execution of a test "
"suite. It also will store a history of all test runs to help in debugging"
" failures and optimizing the scheduler to improve speed. To accomplish "
"this goal it uses the `subunit`_ protocol to facilitate streaming and "
"storing results from multiple workers."
msgstr ""
"stestr は、パラレル Python テスト実行プログラムであり、一つのテストスイート"
"を、分割実行するために、複数プロセスを使い、 `unittest`_ テストスイートを"
"実行するようデザインされています。また、実行失敗のデバッグや実行速度改善に向け"
"たスケジューラ最適化のために、すべてのテスト実行履歴を保存しています。この目標"
"達成のため stestrでは、 `subunit`_ プロトコルを使用し、ストリーミングや"
"複数ワーカーからの結果を保存することを容易にしています。"

#: ../../source/README.rst:40
msgid ""
"stestr originally started as a fork of the `testrepository`_ project. "
"But, instead of being an interface for any test runner that used subunit,"
" like testrepository, stestr concentrated on being a dedicated test "
"runner for python projects. While stestr was originally forked from "
"testrepository it is not backwards compatible with testrepository. At a "
"high level the basic concepts of operation are shared between the two "
"projects but the actual usage is not exactly the same."
msgstr ""
"stestr は、元々 `testrepository`_ プロジェクトのフォークとして始まりました。"
"しかし、subunit を使用する testrepository のようなあらゆるテストランナー"
"インターフェースとなる代わりに、stestr は、python プロジェクトに特化・集中"
"したテストランナーです。stestr は、元々 testrepository からフォークしました"
"が、testrepository との後方互換性はありません。高いレベルでの基本的な実行"
"コンセプトは、それら2つのプロジェクトの間で共有されているものの、実際の使用法"
"は、完全に同一というわけでありません。"

#: ../../source/README.rst:52
msgid "Installing stestr"
msgstr "stestr のインストール"

#: ../../source/README.rst:54
msgid "stestr is available via pypi, so all you need to do is run::"
msgstr "stestr は、pypi 経由で利用可能です。そのため、以下を実行するだけで::"

#: ../../source/README.rst:58
msgid ""
"to get stestr on your system. If you need to use a development version of"
" stestr you can clone the repo and install it locally with::"
msgstr ""
"あなたのシステムに、stestr を取得することができます。もし、開発バージョンの"
"stestr を使う必要があれば、リポジトリをクローンし、ローカルにインストール"
"することができます::"

#: ../../source/README.rst:63
msgid ""
"which will install stestr in your python environment in editable mode for"
" local development"
msgstr ""
"この操作で、stestr をあなたの python 環境のローカル開発環境に対し、編集可能"
"モードでインストールできます。"

#: ../../source/README.rst:67
msgid "Using stestr"
msgstr "stestr の利用"

#: ../../source/README.rst:69
msgid ""
"After you install stestr to use it to run tests is pretty "
"straightforward. The first thing you'll want to do is create a "
"``.stestr.conf`` file for your project. This file is used to tell stestr "
"where to find tests and basic information about how tests are run. A "
"basic minimal example of the contents of this is::"
msgstr ""
"stestr のインストール後、テスト実行のために使う方法は、とても簡単です。まずはじめに、"
"``.stestr.conf`` ファイルをあなたのプロジェクトのために作成します。この"
"ファイルは、「どこにテストがあるのか」「どうやってテストを実行する"
"のか」という基本的な情報を stestr に伝えます。基本最小限の設定例としては次の"
"ようなものとなります::"

#: ../../source/README.rst:78
msgid ""
"which just tells stestr the relative path for the directory to use for "
"test discovery. This is the same as ``--start-directory`` in the standard"
" `unittest discovery`_."
msgstr ""
"この記述は、テスト探索のために使われるディレクトリの相対パスを、stestr に伝え"
"ます。これは、標準的な `unittest discovery`_ の ``--start-directory`` と"
"同様です。"

#: ../../source/README.rst:84
msgid ""
"After this file is created you should be all set to start using stestr to"
" run tests. To run tests just use::"
msgstr ""
"このファイルを作成すれば、stestr を使い始めるためにやるべきことはすべて完了"
"です。テストを実行するためには、単に次のように使うだけです::"

#: ../../source/README.rst:89
msgid ""
"it will first create a results repository at ``.stestr/`` in the current "
"working directory and then execute all the tests found by test discovery."
" If you're just running a single test (or module) and want to avoid the "
"overhead of doing test discovery you can use the ``--no-discover``/``-n``"
" option to specify that test."
msgstr ""
"これにより、まず、結果を保持するためのリポジトリが、カレントワーキング"
"ディレクトリの ``.stestr/`` に作成され、テスト探索により見つかったテストが"
"すべて実行されます。もし、あなたが、単にひとつのテスト（あるいはモジュール）を"
"実行し、テスト探索によるオーバーヘッドを避けたいのであれば、``--no-discover``"
"もしくは ``-n`` オプションをそのテストに対して指定し、実行することにより"
"可能です。"

#: ../../source/README.rst:95
msgid ""
"For all the details on these commands and more thorough explanation of "
"options see the stestr manual: "
"https://stestr.readthedocs.io/en/latest/MANUAL.html"
msgstr ""
"これらのコマンドの詳細は、さらなるオプションの説明は、stestr マニュアルを"
"参照してください: "
"https://stestr.readthedocs.io/en/latest/MANUAL.html"

#: ../../source/README.rst:99
msgid "Migrating from testrepository"
msgstr "testrepository からの移行"

#: ../../source/README.rst:101
msgid ""
"If you have a project that is already using testrepository stestr's "
"source repo contains a helper script for migrating your repo to use "
"stestr. This script just creates a ``.stestr.conf`` file from a "
"``.testr.conf`` file. (assuming it uses a standard subunit.run test "
"command format) To run this from your project repo just call::"
msgstr ""
"もし、testrepository を既に使用しているプロジェクトを持っているのであれば、"
"stestr のソースリポジトリには、あなたのリポジトリを stestr を利用するように"
"移行するための、ヘルパースクリプトがあります。このスクリプトは、単に、"
"``.testr.conf`` ファイルから、 ``.stestr.conf`` ファイルを作成します。"
"（標準的な subunit.run テストコマンド形式を利用していることを想定しています）"
"これを実行するためには、あなたのプロジェクトリポジトリで、以下を実行します::"

#: ../../source/README.rst:109
msgid "and you'll have a ``.stestr.conf`` created."
msgstr "これにより、 ``.stestr.conf`` が作成されます。"

#: ../../source/README.rst:112
msgid "Building a manpage"
msgstr "manpage の生成"

#: ../../source/README.rst:114
msgid ""
"The stestr manual has been formatted so that it renders well as html and "
"as a manpage. The html output and is autogenerated and published to: "
"https://stestr.readthedocs.io/en/latest/MANUAL.html but the manpage has "
"to be generated by hand. To do this you have to manually run sphinx-build"
" with the manpage builder. This has been automated in a small script that"
" should be run from the root of the stestr repository::"
msgstr ""
"stestr マニュアルは、htmlと同様に、manpage としてもレンダリングするために整形"
"されています。html 出力物と自動生成され公開されているものはこちらです:"
"https://stestr.readthedocs.io/en/latest/MANUAL.html しかしながら、その manpage"
"は、手動で生成する必要があります。このためには、手動で sphinx-build コマンドを"
"manpage builder とともに実行する必要があります。これは、簡単なスクリプトで"
"自動化されており、 stestr リポジトリのルートディレクトリで以下を実行します::"

#: ../../source/README.rst:123
msgid ""
"which will generate the troff file in doc/build/man/stestr.1 which is "
"ready to be packaged and or put in your system's man pages."
msgstr ""
"これにより、troff ファイルが doc/build/man/stestr.1 に作成され、それは、"
"パッケージ可能で、あなたのシステムの man page としても配置可能です。"

#: ../../source/README.rst:127
msgid "Contributing"
msgstr "コントリビューション方法"

#: ../../source/README.rst:129
msgid ""
"To browse the latest code, see: https://github.com/mtreinish/stestr To "
"clone the latest code, use: ``git clone "
"https://github.com/mtreinish/stestr.git``"
msgstr ""
"最新コードの参照: https://github.com/mtreinish/stestr"
"最新コードのクローン: ``git clone https://github.com/mtreinish/stestr.git``"

#: ../../source/README.rst:132
msgid ""
"Guidelines for contribution are documented at: "
"http://stestr.readthedocs.io/en/latest/developer_guidelines.html"
msgstr ""
"コントリビューションのガイドラインドキュメント: "
"http://stestr.readthedocs.io/en/latest/developer_guidelines.html"

#: ../../source/README.rst:134
msgid ""
"Use `github pull requests`_ to submit patches. Before you submit a pull "
"request ensure that all the automated testing will pass by running "
"``tox`` locally. This will run the test suite and also the automated "
"style rule checks just as they will in CI. If CI fails on your change it "
"will not be able to merge."
msgstr ""
"パッチを出すためには、`github pull requests`_ を使用してください。"
"プルリクエストを出す前には、手元の環境で ``tox`` を実行して、すべての自動"
"テストがパスすることを確認してください。これは、CI環境で実行されるものと同様の"
"テストスイートならびに、自動スタイルチェックを実行します。もし、あなたの変更に"
"より、CI が fail となった場合、その変更はマージすることができません。"

#: ../../source/README.rst:142
msgid "Community"
msgstr "コミュニティ"

#: ../../source/README.rst:144
msgid "Besides Github interactions there is also a stestr IRC channel:"
msgstr "GitHub でのやり取りに加え、stestr の IRC チャネルもあります:"

#: ../../source/README.rst:146
msgid "#stestr on Freenode"
msgstr "Freenode の #stestr チャネル"

#: ../../source/README.rst:148
msgid "feel free to join to ask questions, or just discuss stestr."
msgstr "stestr に関する質問、もしくは議論をしていますので、気軽に参加してください。"

